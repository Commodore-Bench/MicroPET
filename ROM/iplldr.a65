
; The first block of this is loaded by the IPL from the SPI Flash chip into the uppermost
; 256 bytes of RAM in bank zero, where the CPU boots from.
; This boot block then copies the last 2k of this to $8800 on bank0, and jumps
; to it to execute it.
; 
; Note that this relies on the Flash ROM containing the
; PET ROM images to copy from. 
;

SPICTRL	=$e808
SPIDATA	=$e809
SPIPEEK	=$e80a

RUNADDR	=$8800
ADRDIFF	=$ff00-$8800

	*=$ff00
vreset	.(
	; init the CPU
	sei
	cld
	ldx #$ff
	txs

	; switch to native mode
	clc
	xce

	; set ac to single byte ...
	sep #%00100000
	; ... and tell the assembler about it
	.as

	; set X/Y registers to 16 bit ...
	rep #%00010000
	; ... and tell the assembler about it
	.xl

	; -----------------------
	; copy the boot code to $9000 (for now)
	lda #1
	sta SPICTRL	; enable Flash
	lda #3
	sta SPIDATA	; READ command
	lda #0
	sta SPIDATA	; bits 23-16
	lda #>$0800	
	sta SPIDATA	; bits 15-8
	lda #<$0800
	sta SPIDATA	; bits 7-0

	lda SPIDATA	; trigger shift in of first byte into SR (value read is still invalid)

	ldx #0
readloop
	lda SPIDATA	; read byte
	sta RUNADDR,x
	inx
	cpx #$0800
	bne readloop
	
	lda #0
	sta SPICTRL	; deselect Flash

	jmp RUNADDR

vcop
vbrk
vabort
vnmi
virq
	rti

        .dsb $fff4-*,$ff

        .word vcop
        .word vbrk
        .word vabort
        .word vnmi
        .word vreset
        .word virq

	.)

	; here we have 256 byte
	; fill up to 2k
	.dsb 2048-256

	; ------------------------
	; this is the actual boot code, 
	; loaded from Flash via SPI to $8800 by above ipl code

	*=RUNADDR
jmpboot
	.(

	; code runs in .xl
	.xl

	; -----------------------
	; copy over charrom to RAM
	; $2000-$3fff in flash img

	lda #$20
	ldx #$a000
	ldy #$2000
	jsr flash2direct_xl
	; now copy from bank 0 to target location
	ldx #0
copy
	lda $a000,x	; location in test ROM bank
	sta $070000,x	; location in RAM - uppermost RAM bank
	inx
	cpx #$2000
	bne copy

	jsr clrscreen_xl
	jsr selecttext_xl

	; switches to .xs
	sep #%00010000
	.xs

cloop	jsr checkkbd_xs
	bcs cloop

	rep #%00010000
	.xl

	pha
	jsr clrscreen_xl

	lda #0		
	xba		; prime high byte of AC with 0

	pla
	pha
	and #$7f
	tay		; this is a wide operation, so AC high byte must be clear

	lda #0
	sta $e800	; default to 40 columns

	; 1= Basic2, 2=Basic4, 3=Basic4/80, 4=Basic4/8296
	dey
	bne basic4

	; upgrade ROMs with BASIC2
basic2	.(
	; -----------------------
	; copy over PET ROM into low RAM
	; $4000-$7fff in bootimg to $c000-$ffff in RAM

	lda #$40
	ldx #$c000
	ldy #$4000
	jsr flash2direct_xl

	pla		; clear c64 flag (ignored right now)
	lda #%10000000	; write protect $c000-$ffff
	jmp end
	.)

	; 1=Basic4, 2=Basic4/80, 3=Basic4/8296
basic4	.(
	phy
	; -----------------------
	; copy over @MON 
	lda #$10
	ldx #$a000
	ldy #$1000
	jsr flash2direct_xl
	
	; -----------------------
	; copy over PET ROM for 40 columns into low RAM
	; $9000-$dfff in bootimg
	lda #$90
	ldx #$b000
	ldy #$5000
	jsr flash2direct_xl
	ply
	dey
	bne not4

	; 4032
	pla
	bpl notc64

	; copy over PET4 editor with C64 kbd mapping
	lda #$e0
	ldx #$e000
	ldy #$1000
	jsr flash2direct_xl

notc64	lda #%11000000	; write protect $b000-$ffff
	jmp end
	.)

	; 1=Basic4/80, 2=Basic4/8296
not4	.(
	; copying 80 col editor?
	pla
	phy

	cmp #$80	; as y is wide, and a is narrow, is N-flag when set on tay from 8 or 16 bit?
	bcc notc64

	lda #$f0
	ldx #$e000
	ldy #$1000
	jsr flash2direct_xl
	jmp end8

notc64
	; BASIC4 with 80 column machines (with CRTC)
	; as option for BASIC4 with 40 cols
	; -----------------------
	; copy over PET 80 column editor ROM into low RAM
	; $8000-$8fff in bootimg
	lda #$80
	ldx #$e000
	ldy #$1000
	jsr flash2direct_xl
end8
	lda #%00000010
	sta $e800	; 80 column

	ply
	dey
	bne not8032

	lda #%11000000	; write protect ROM $b000-$ffff
	.byt $2c
not8032	lda #%11000001	; 8296
	; fallthrough
	.)

	; -----------------------
	; switch back to emulation mode
end
	sta $e801

	; set X/Y registers to 8 bit ...
	sep #%00010000
	; ... and tell the assembler about it
	.xs

	; switch to native mode
	sec
	xce

	jmp ($fffc)	; RESET vector

	; ----------------------------
	; copy an area from flash to bank 0 RAM

	.xl
	; AC = page in Flash (8bit)
	; XR = start in bank 0 (16bit)
	; YR = number of bytes (16 bit)
flash2direct_xl .(
	pha
	lda #1
	sta SPICTRL	; enable Flash
	lda #3
	sta SPIDATA	; READ command
	lda #0
	sta SPIDATA	; bits 23-16
	pla
	sta SPIDATA	; bits 15-8
	lda #0
	sta SPIDATA	; bits 7-0

	lda SPIDATA	; trigger shift in of first byte into SR (value read is still invalid)

readloop
	lda SPIDATA	; read byte, trigger shift in of next byte
	cpx #$e800	; skip I/O window
	bcc ok
	cpx #$e900
	bcc nok
ok	sta 0,x
nok	inx
	dey
	bne readloop
	
	lda #0
	sta SPICTRL	; deselect Flash
	rts
	.)

	; ----------------------------
	; check keyboard for input

	.xs

checkkbd_xs .(
	; init
	lda #$38	; DDR, CA2 output hi
	sta $e811
	lda #$0f	; set keybd row select to output
	sta $e810
	lda #$3c	; Port A, CA2 output hi
	sta $e811
	lda #$38	; DDR, CB2 output hi
	sta $e813
	lda #0		; all bits input PB
	sta $e812
	lda #$3c	; Port B, CB2 output hi
	sta $e813
	; scan
	ldx #$50
	lda $e810
	and #$F0
	sta $e810
rloop	ldy #8
ioloop	lda $e812
	cmp $e812
	bne ioloop
bloop	lsr
	bcc gotone
nextr	dex
	beq done
	dey
	bne bloop
	inc $e810
	bra rloop	; always

done	sec
	rts

gotone	; x has number of key
	; key number is (9-row)*8+(7-col)+1 where row/col are from www.6502.org/users/andre/petindex/keymap/petgraph.png
	cpx #41		; 4/7 = "6"
	beq is8296
	cpx #18		; 7/6 = "2"
	beq is2
	cpx #42		; 4/6 = "4"
	beq is4
	cpx #50		; 3/6 = "8"
	beq is8

	cpx #22		; 7/2 = "N" = "6" on C64 kbd
	beq is8296c64
	cpx #24		; 7/0 = "X" = "2" on C64 kbd
	beq is2c64
	cpx #23		; 7/1 = "V" = "4" on C64 kbd
	beq is4c64
	cpx #21		; 7/3 = "," = "8" on C64 kbd
	beq is8c64

	sec
	rts
is8296	lda #4
	.byt $2c
is8	lda #3
	.byt $2c
is4	lda #2
	.byt $2c
is2	lda #1
	clc
	rts
is8296c64 lda #4+128
	.byt $2c
is8c64	lda #3+128
	.byt $2c
is4c64	lda #2+128
	.byt $2c
is2c64	lda #1+128
	clc
	rts
	.)

	; ----------------------------
	; screen routines

	; back in 16bit land
	.xl

clrscreen_xl .(
	ldx #1999	; clear full 80 column screen
	lda #$20
loop	sta $8000,x
	dex
	bpl loop
	rts
	.)

selecttext_xl .(
	ldx #0
outl	lda text,x
	beq endt
	and #$bf	; to PET Screencode
	sta $8000,x
	inx
	bne outl
endt	
	rts
	
text	.asc "                                        "
	.asc "PRESS KEY FOR BOOT OPTION:              "
	.asc "                                        "
	.asc "* BASIC ", "2"+$80, " (40 COLUMNS)                  "
	.asc "* BASIC 4, ", "4"+$80, "0 COLUMNS                   "
	.asc "* BASIC 4, ", "8"+$80, "0 COLUMNS                   "
	.asc "* BASIC 4, 829", "6"+$80, " (80 COLUMNS)"
	.asc 0

	.)

	.dsb RUNADDR+2048-*,$ff
	.)

